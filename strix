#!/bin/bash

VERSION="1.0.0"

# Get the directory of the strix script, handling symlinks correctly
SCRIPT_PATH=$(readlink -f "$0")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
STRIX_HOME="$SCRIPT_DIR"

# Function to display ASCII logo
function show_logo() {
    echo -e "\033[1;36m"
    echo "   _____ _______ _____  _____   __   ____   _____ "
    echo "  / ____|__   __|  __ \|_   _| /_ | / __ \ / ____|"
    echo " | (___    | |  | |__) | | |    | || |  | | (___  "
    echo "  \___ \   | |  |  _  /  | |    | || |  | |\___ \ "
    echo "  ____) |  | |  | | \ \ _| |_   | || |__| |____) |"
    echo " |_____/   |_|  |_|  \_\_____|  |_(_)____/|_____/ "
    echo -e "\033[0m"
    echo "          Unified Package Manager v$VERSION"
    echo "------------------------------------------------"
}

# Function to check if modules folder is initialized
function check_modules() {
    if [ ! -d "$STRIX_HOME/modules" ] || [ -z "$(ls -A "$STRIX_HOME/modules" 2>/dev/null)" ]; then
        echo "Modules directory is empty or not initialized."
        echo "Initializing modules..."
        initialize_modules
        return 1
    fi
    return 0
}

# Function to initialize modules
function initialize_modules() {
    # Create required directories
    mkdir -p "$STRIX_HOME/modules"
    mkdir -p "$STRIX_HOME/.strix_db"
    touch "$STRIX_HOME/.strix_db/installed.list"
    
    # Create module manager if it doesn't exist
    if [ ! -f "$STRIX_HOME/modules/strix-manager.sh" ]; then
        cat > "$STRIX_HOME/modules/strix-manager.sh" << 'EOF'
#!/bin/bash
# Strix OS Package Manager Core
SCRIPT_PATH=$(readlink -f "$0")
SCRIPT_DIR=$(dirname "$SCRIPT_PATH")
STRIX_ROOT=$(dirname "$SCRIPT_DIR")
# ... rest of manager code ...
EOF
        chmod +x "$STRIX_HOME/modules/strix-manager.sh"
    fi
    
    # Create basic modules
    create_basic_modules
    
    echo "Modules have been initialized successfully."
}

# Function to create basic modules
function create_basic_modules() {
    create_module "gui-gnome" "GNOME Desktop Environment" "sudo apt update && sudo apt install -y gnome-shell ubuntu-gnome-desktop"
    create_module "kali-tools" "Security and penetration testing tools" "sudo apt update && sudo apt install -y kali-tools-top10"
    create_module "ros2-humble" "ROS 2 Humble Hawksbill" "sudo apt update && sudo apt install -y curl && curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key -o /usr/share/keyrings/ros-archive-keyring.gpg && echo \"deb [arch=\$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu \$(. /etc/os-release && echo \$UBUNTU_CODENAME) main\" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null && sudo apt update && sudo apt install -y ros-humble-desktop"
    create_module "vscode" "Visual Studio Code editor" "wget -qO- https://packages.microsoft.com/keys/microsoft.asc | gpg --dearmor > microsoft.gpg && sudo mv microsoft.gpg /etc/apt/trusted.gpg.d/microsoft.gpg && echo \"deb [arch=amd64] https://packages.microsoft.com/repos/vscode stable main\" | sudo tee /etc/apt/sources.list.d/vscode.list && sudo apt update && sudo apt install -y code"
}

# Function to create a module
function create_module() {
    NAME=$1
    DESC=$2
    INSTALL_CMD=$3
    
    MODULE_DIR="$STRIX_HOME/modules/$NAME"
    mkdir -p "$MODULE_DIR"
    
    # Create info.txt
    echo "$DESC" > "$MODULE_DIR/info.txt"
    
    # Create install.sh
    cat > "$MODULE_DIR/install.sh" << EOF
#!/bin/bash
echo "Installing $NAME..."
$INSTALL_CMD
echo "$NAME installed successfully!"
EOF
    chmod +x "$MODULE_DIR/install.sh"
}

# Detect OS and package manager
function detect_os() {
    if [ -f /etc/os-release ]; then
        . /etc/os-release
        OS_NAME=$ID
        OS_VERSION=$VERSION_ID
        
        case $OS_NAME in
            ubuntu|debian|linuxmint)
                PKG_MANAGER="apt"
                INSTALL_CMD="apt install -y"
                UPDATE_CMD="apt update"
                ;;
            fedora|centos|rhel)
                PKG_MANAGER="dnf"
                INSTALL_CMD="dnf install -y"
                UPDATE_CMD="dnf check-update"
                ;;
            arch|manjaro)
                PKG_MANAGER="pacman"
                INSTALL_CMD="pacman -S --noconfirm"
                UPDATE_CMD="pacman -Sy"
                ;;
            *)
                PKG_MANAGER="apt"
                INSTALL_CMD="apt install -y"
                UPDATE_CMD="apt update"
                echo "Warning: Unsupported OS detected. Defaulting to apt."
                ;;
        esac
    else
        PKG_MANAGER="apt"
        INSTALL_CMD="apt install -y"
        UPDATE_CMD="apt update"
        echo "Warning: Could not detect OS. Defaulting to apt."
    fi
    
    echo "Detected OS: $OS_NAME $OS_VERSION using $PKG_MANAGER"
}

# Function to display help information
function show_help() {
    show_logo
    echo "Usage: strix [command] [options]"
    echo ""
    echo "Commands:"
    echo "  install <module>     Install a module or system package"
    echo "  uninstall <module>   Remove a module or system package"
    echo "  update               Update Strix OS components"
    echo "  list                 List all available modules"
    echo "  search <keyword>     Search for modules by keyword"
    echo "  status <module>      Check the status of a module"
    echo "  ros-install <pkg>    Install a ROS package"
    echo "  version              Display the version of Strix OS"
    echo "  help                 Show this help message"
    echo ""
    echo "Example: strix install kali-tools"
}

# Function to update the system
function update_system() {
    echo "Updating Strix OS components..."
    
    # Initialize modules if needed
    check_modules
    
    echo "Strix OS has been updated to the latest version."
}

# Function to install a module
function install_module() {
    PKG=$1
    
    # Check if modules are initialized
    check_modules
    
    # Check if module exists
    if [ -d "$STRIX_HOME/modules/$PKG" ]; then
        echo "Installing $PKG..."
        
        # Check if install script exists
        if [ ! -f "$STRIX_HOME/modules/$PKG/install.sh" ]; then
            echo "Error: Installation script for '$PKG' not found."
            return 1
        fi
        
        # Make script executable and run it
        chmod +x "$STRIX_HOME/modules/$PKG/install.sh"
        bash "$STRIX_HOME/modules/$PKG/install.sh"
        
        # Register the module as installed
        if [ -f "$STRIX_HOME/modules/strix-manager.sh" ]; then
            bash "$STRIX_HOME/modules/strix-manager.sh" register $PKG
        fi
    else
        # Module not found, try as a system package
        echo "Module '$PKG' not found in Strix repository."
        echo "Attempting to install '$PKG' as a system package..."
        system_install $PKG
    fi
}

# Function to install a package using the system's package manager
function system_install() {
    PKG=$1
    detect_os
    
    echo "Installing $PKG using $PKG_MANAGER..."
    sudo $UPDATE_CMD
    sudo $INSTALL_CMD $PKG
    
    # Create a virtual module for tracking
    mkdir -p "$STRIX_HOME/modules/sys-$PKG"
    echo "System package: $PKG" > "$STRIX_HOME/modules/sys-$PKG/info.txt"
    echo "#!/bin/bash" > "$STRIX_HOME/modules/sys-$PKG/install.sh"
    echo "sudo $INSTALL_CMD $PKG" >> "$STRIX_HOME/modules/sys-$PKG/install.sh"
    chmod +x "$STRIX_HOME/modules/sys-$PKG/install.sh"
    
    # Register the module
    if [ -f "$STRIX_HOME/modules/strix-manager.sh" ]; then
        bash "$STRIX_HOME/modules/strix-manager.sh" register "sys-$PKG"
    fi
}

# Function to install a ROS package
function ros_install() {
    PKG=$1
    
    # Check if modules are initialized
    check_modules
    
    # Check for ROS installation
    if ! command -v ros2 &> /dev/null; then
        echo "ROS 2 not found. Installing ROS first..."
        install_module "ros2-humble"
    fi
    
    # Install the ROS package
    echo "Installing ROS package: $PKG..."
    sudo apt update
    sudo apt install -y ros-humble-$PKG
    
    # Create a virtual module for tracking
    mkdir -p "$STRIX_HOME/modules/ros-$PKG"
    echo "ROS package: $PKG" > "$STRIX_HOME/modules/ros-$PKG/info.txt"
    echo "#!/bin/bash" > "$STRIX_HOME/modules/ros-$PKG/install.sh"
    echo "sudo apt install -y ros-humble-$PKG" >> "$STRIX_HOME/modules/ros-$PKG/install.sh"
    chmod +x "$STRIX_HOME/modules/ros-$PKG/install.sh"
    
    # Register the module
    if [ -f "$STRIX_HOME/modules/strix-manager.sh" ]; then
        bash "$STRIX_HOME/modules/strix-manager.sh" register "ros-$PKG"
    fi
}

# Function to uninstall a module
function uninstall_module() {
    MODULE=$1
    
    # Check if modules are initialized
    check_modules
    
    echo "Uninstalling $MODULE..."
    
    # Check if module exists
    if [ ! -d "$STRIX_HOME/modules/$MODULE" ]; then
        echo "Error: Module '$MODULE' not found."
        return 1
    fi
    
    # Check if uninstall script exists
    if [ -f "$STRIX_HOME/modules/$MODULE/uninstall.sh" ]; then
        chmod +x "$STRIX_HOME/modules/$MODULE/uninstall.sh"
        bash "$STRIX_HOME/modules/$MODULE/uninstall.sh"
    else
        # If no uninstall script, try to use system package manager
        if [[ "$MODULE" == sys-* ]]; then
            PKG=${MODULE#sys-}
            detect_os
            echo "Uninstalling system package $PKG using $PKG_MANAGER..."
            
            case $PKG_MANAGER in
                apt)
                    sudo apt remove --purge -y $PKG
                    ;;
                dnf)
                    sudo dnf remove -y $PKG
                    ;;
                pacman)
                    sudo pacman -R --noconfirm $PKG
                    ;;
            esac
        elif [[ "$MODULE" == ros-* ]]; then
            PKG=${MODULE#ros-}
            echo "Uninstalling ROS package ros-humble-$PKG..."
            sudo apt remove --purge -y ros-humble-$PKG
        else
            echo "No uninstall script found. Please uninstall manually."
        fi
    fi
    
    # Unregister the module
    if [ -f "$STRIX_HOME/modules/strix-manager.sh" ]; then
        bash "$STRIX_HOME/modules/strix-manager.sh" unregister $MODULE
    fi
}

# Function to list available modules
function list_modules() {
    # Check if modules are initialized
    if ! check_modules; then
        echo "Modules have been initialized. Listing available modules:"
    else
        echo "Listing available modules:"
    fi
    
    # List modules
    find "$STRIX_HOME/modules" -mindepth 1 -maxdepth 1 -type d | xargs -n 1 basename
}

# Function to search for modules
function search_modules() {
    KEYWORD=$1
    
    # Check if modules are initialized
    check_modules
    
    echo "Searching for modules matching '$KEYWORD'..."
    
    # Search in module info files
    FOUND=$(grep -l "$KEYWORD" "$STRIX_HOME/modules/"*/info.txt 2>/dev/null)
    
    if [ -n "$FOUND" ]; then
        echo "$FOUND" | sed 's|.*/\([^/]*\)/info.txt|\1|'
    else
        echo "No modules found matching '$KEYWORD'."
        echo "Searching system packages instead..."
        detect_os
        
        case $PKG_MANAGER in
            apt)
                apt-cache search "$KEYWORD" | head -10
                ;;
            dnf)
                dnf search "$KEYWORD" | head -10
                ;;
            pacman)
                pacman -Ss "$KEYWORD" | head -10
                ;;
        esac
    fi
}

# Function to check module status
function check_module_status() {
    MODULE=$1
    
    # Check if modules are initialized
    check_modules
    
    echo "Checking status of $MODULE..."
    
    if [ -f "$STRIX_HOME/modules/strix-manager.sh" ]; then
        bash "$STRIX_HOME/modules/strix-manager.sh" status $MODULE
    else
        echo "Error: Strix manager not found."
        echo "Please run 'strix update' to initialize the system."
    fi
}

# Command actions
case "$1" in
    install)
        if [ -z "$2" ]; then
            echo "Please specify a module to install."
            echo "Usage: strix install <module>"
        else
            install_module $2
        fi
        ;;
    system-install)
        if [ -z "$2" ]; then
            echo "Please specify a package to install."
            echo "Usage: strix system-install <package>"
        else
            system_install $2
        fi
        ;;
    ros-install)
        if [ -z "$2" ]; then
            echo "Please specify a ROS package to install."
            echo "Usage: strix ros-install <package>"
        else
            ros_install $2
        fi
        ;;
    uninstall)
        if [ -z "$2" ]; then
            echo "Please specify a module to uninstall."
            echo "Usage: strix uninstall <module>"
        else
            uninstall_module $2
        fi
        ;;
    update)
        update_system
        ;;
    list)
        list_modules
        ;;
    search)
        if [ -z "$2" ]; then
            echo "Please specify a search term."
            echo "Usage: strix search <keyword>"
        else
            search_modules $2
        fi
        ;;
    status)
        if [ -z "$2" ]; then
            echo "Please specify a module to check."
            echo "Usage: strix status <module>"
        else
            check_module_status $2
        fi
        ;;
    version)
        show_logo
        detect_os
        ;;
    help)
        show_help
        ;;
    *)
        show_help
        ;;
esac
