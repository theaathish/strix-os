#!/bin/bash

VERSION="1.0.0"

# Get the directory of the strix script (works even when called from PATH)
SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Function to display help information
function show_help() {
    echo "Strix OS Package Manager v$VERSION"
    echo "Usage: strix [command] [options]"
    echo ""
    echo "Commands:"
    echo "  install <module>     Install a specific module"
    echo "  uninstall <module>   Remove a specific module"
    echo "  update               Update Strix OS and its modules"
    echo "  list                 List all available modules"
    echo "  search <keyword>     Search for modules by keyword"
    echo "  status <module>      Check the status of a module"
    echo "  version              Display the version of Strix OS"
    echo "  help                 Show this help message"
    echo ""
    echo "Example: strix install kali-tools"
}

# Function to fetch updates from GitHub
function update_from_github() {
    echo "Fetching updates from GitHub..."
    cd "$SCRIPT_DIR"
    git pull origin main
    echo "Strix OS has been updated to the latest version."
}

# Function to install a module from GitHub
function install_module() {
    MODULE=$1
    echo "Installing $MODULE..."
    
    # Check if module exists
    if [ ! -d "$SCRIPT_DIR/modules/$MODULE" ]; then
        echo "Error: Module '$MODULE' not found."
        echo "Use 'strix list' to see available modules."
        return 1
    fi
    
    # Check if install script exists
    if [ ! -f "$SCRIPT_DIR/modules/$MODULE/install.sh" ]; then
        echo "Error: Installation script for '$MODULE' not found."
        return 1
    fi
    
    # Make the install script executable
    chmod +x "$SCRIPT_DIR/modules/$MODULE/install.sh"
    
    # Run the module's install script
    bash "$SCRIPT_DIR/modules/$MODULE/install.sh"
    
    # Call the strix manager to register the module
    bash "$SCRIPT_DIR/modules/strix-manager.sh" register $MODULE
}

# Function to uninstall a module
function uninstall_module() {
    MODULE=$1
    echo "Uninstalling $MODULE..."
    
    # Check if module exists
    if [ ! -d "$SCRIPT_DIR/modules/$MODULE" ]; then
        echo "Error: Module '$MODULE' not found."
        return 1
    fi
    
    # Check if uninstall script exists
    if [ -f "$SCRIPT_DIR/modules/$MODULE/uninstall.sh" ]; then
        chmod +x "$SCRIPT_DIR/modules/$MODULE/uninstall.sh"
        bash "$SCRIPT_DIR/modules/$MODULE/uninstall.sh"
    else
        echo "Warning: No uninstall script found. Attempting generic uninstall..."
        bash "$SCRIPT_DIR/modules/strix-manager.sh" unregister $MODULE
    fi
}

# Function to search for modules
function search_modules() {
    KEYWORD=$1
    echo "Searching for modules matching '$KEYWORD'..."
    grep -l "$KEYWORD" "$SCRIPT_DIR/modules/"*/info.txt 2>/dev/null | sed 's|.*/\([^/]*\)/info.txt|\1|'
}

# Function to check module status
function check_module_status() {
    MODULE=$1
    echo "Checking status of $MODULE..."
    bash "$SCRIPT_DIR/modules/strix-manager.sh" status $MODULE
}

# Command actions
case "$1" in
    install)
        if [ -z "$2" ]; then
            echo "Please specify a module to install."
            echo "Usage: strix install <module>"
        else
            install_module $2
        fi
        ;;
    uninstall)
        if [ -z "$2" ]; then
            echo "Please specify a module to uninstall."
            echo "Usage: strix uninstall <module>"
        else
            uninstall_module $2
        fi
        ;;
    update)
        update_from_github
        ;;
    list)
        echo "Listing available modules:"
        if [ -d "$SCRIPT_DIR/modules" ]; then
            find "$SCRIPT_DIR/modules" -mindepth 1 -maxdepth 1 -type d | xargs -n 1 basename
        else
            echo "Error: Modules directory not found."
            echo "Please run 'strix update' to initialize the modules directory."
        fi
        ;;
    search)
        if [ -z "$2" ]; then
            echo "Please specify a search term."
            echo "Usage: strix search <keyword>"
        else
            search_modules $2
        fi
        ;;
    status)
        if [ -z "$2" ]; then
            echo "Please specify a module to check."
            echo "Usage: strix status <module>"
        else
            check_module_status $2
        fi
        ;;
    version)
        echo "Strix OS v$VERSION"
        ;;
    help)
        show_help
        ;;
    *)
        show_help
        ;;
esac
